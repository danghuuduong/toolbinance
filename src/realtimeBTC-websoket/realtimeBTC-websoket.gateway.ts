import {
  WebSocketGateway,
  WebSocketServer,
  OnGatewayConnection,
  OnGatewayDisconnect,
  SubscribeMessage,
} from '@nestjs/websockets';
import { Server, Socket } from 'socket.io';
import { startTradingService } from 'src/start-trading/start-trading.service';
import * as WebSocket from 'ws';
import { EMA } from 'technicalindicators';
import { realtimeBTCWebsoketService } from './realtimeBTC-websoketservice';

@WebSocketGateway(3001, {
  cors: {
    origin: 'http://localhost:5173', // Cho ph√©p frontend React k·∫øt n·ªëi t·ª´ localhost:5173
    methods: ['GET', 'POST'],
    allowedHeaders: ['Content-Type'],
    credentials: true, // N·∫øu c·∫ßn truy·ªÅn cookie ho·∫∑c d·ªØ li·ªáu x√°c th·ª±c
  },
})

export class realtimeBTCWebsoketGateway
  implements OnGatewayConnection, OnGatewayDisconnect {
  @WebSocketServer() server: Server;

  private binanceWs: WebSocket;
  private currentInterval: string = '1m'; // Interval m·∫∑c ƒë·ªãnh
  private isTrading: boolean = false;
  private totalAmount: number = 0;
  private moneyfodingOne: number = 0;
  private foldingCurrent: number = 0;
  private prices: number[] = []; // L∆∞u tr·ªØ gi√° ƒë√≥ng c·ª≠a c·ªßa c√°c c√¢y n·∫øn

  constructor(
    private readonly startTradingService: startTradingService,
    private readonly realtimeBTCWebsoketService: realtimeBTCWebsoketService
  ) {
    this.connectToBinance(this.currentInterval); 
  }

  async handleSetInfoMoney() {
    try {
      const result = await this.startTradingService.getStatusTrading();
      this.isTrading = result.isTrading;
      this.totalAmount = result.totalAmount;
      this.moneyfodingOne = result.moneyfodingOne;
      this.foldingCurrent = result.foldingCurrent;
    } catch (error) {
      console.error('Error getStatusTrading', error);
    }
  }

  // H√†m k·∫øt n·ªëi WebSocket
  connectToBinance(interval: string) {
    this.binanceWs = new WebSocket(`wss://stream.binance.com:9443/ws/btcusdt@kline_${interval}`,);
    this.binanceWs.on('message', (data: string) => this.handleCandlestickUpdate(JSON.parse(data)));
    this.binanceWs.on('error', (err) => { console.error('WebSocket error: ', err); });
    this.binanceWs.on('close', () => { console.log(' close'); this.reconnectWebSocket(); });
    this.binanceWs.on('ping', (data) => { console.log(' ping', data); this.binanceWs.pong(data); });
  }

  reconnectWebSocket() { this.connectToBinance(this.currentInterval); }// H√†m t·ª± ƒë·ªông reconnect sau khi WebSocket b·ªã ƒë√≥ng

  // L·∫Øng nghe s·ª± ki·ªán "changeTimeInterval" t·ª´ frontend
  // @SubscribeMessage('changeTimeInterval')
  // handleTimeIntervalChange(client: Socket, interval: string) {
  //   // ƒê√≥ng k·∫øt n·ªëi c≈© v√† m·ªü k·∫øt n·ªëi m·ªõi v·ªõi interval ƒë∆∞·ª£c y√™u c·∫ßu
  //   if (this.binanceWs) {
  //     this.binanceWs.close(); // ƒê√≥ng k·∫øt n·ªëi WebSocket c≈©
  //     this.currentInterval = interval;
  //   }
  // }

  // H√†m x·ª≠ l√Ω d·ªØ li·ªáu n·∫øn v√† g·ª≠i cho frontend
  handleCandlestickUpdate(data: any) {

    const candlestick = data.k;
    const isCandleClose = candlestick.x;
    const E = data.E;
    const date = new Date(E);

    // L·∫•y gi·ªù, ph√∫t, gi√¢y v√† ƒë·ªãnh d·∫°ng l·∫°i th·ªùi gian theo ki·ªÉu "00:00:00"
    const hours = String(date.getUTCHours()).padStart(2, '0');
    const minutes = String(date.getUTCMinutes()).padStart(2, '0');
    const seconds = String(date.getUTCSeconds()).padStart(2, '0');

    // In ra th·ªùi gian ƒë·ªãnh d·∫°ng "00:00:00"
    const timeString = `${hours}:${minutes}:${seconds}`;



    console.log("üöÄ ~ time_________",candlestick.i, timeString, isCandleClose)
    isCandleClose && this.realtimeBTCWebsoketService.mainTrading(candlestick);

    const candlestickInfo = {
      openTime: new Date(candlestick.t).toLocaleString(),
      openPrice: candlestick.o,
      closePrice: candlestick.c,
      highPrice: candlestick.h,
      lowPrice: candlestick.l,
      volume: candlestick.v,
      closeTime: new Date(candlestick.T).toLocaleString(),
      type: candlestick.i,
      statusTrading: this.isTrading,
      // emaCrossover: crossoverResult, // G·ª≠i k·∫øt qu·∫£ giao c·∫Øt EMA
    };
    this?.server?.emit('candleStick-RealTime', candlestickInfo);
  }


  handleConnection(client: Socket) { console.log('Client connected'); }
  handleDisconnect(client: Socket) { console.log('Client disconnected'); }
}
